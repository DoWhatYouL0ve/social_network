{"version":3,"file":"static/js/54.3ab85fe4.chunk.js","mappings":"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","sources":["webpack://social_network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","webpack://social_network/./src/components/Profile/ProfileInfo/profileInfoForm/form.module.css?a390","components/Profile/ProfileInfo/profileInfoForm/ProfileInfoContactForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social_network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social_network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm/AddMyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://social_network/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avaDescriptionWrapper\":\"ProfileInfo_avaDescriptionWrapper__WhcBl\",\"changeAva\":\"ProfileInfo_changeAva__Nm7-r\",\"fullName\":\"ProfileInfo_fullName__App6w\",\"profileInfoBackground\":\"ProfileInfo_profileInfoBackground__90ZtQ\",\"profileStatusWrapper\":\"ProfileInfo_profileStatusWrapper__Cwp3P\",\"accountInfo\":\"ProfileInfo_accountInfo__Cy3Wy\",\"contactsInfoWrapper\":\"ProfileInfo_contactsInfoWrapper__N-TTG\",\"lookingForAJob\":\"ProfileInfo_lookingForAJob__6GEd5\",\"description\":\"ProfileInfo_description__4ElWF\"};","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport style from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileStatusWrapper}>\r\n            {!editMode && (\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status || 'no status'}\r\n                    </span>\r\n                </div>\r\n            )}\r\n            {editMode && (\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={status}\r\n                        onBlur={deactivateEditMode}\r\n                        autoFocus={true}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"accountInfoForm\":\"form_accountInfoForm__YYMjE\"};","import React from 'react'\r\nimport style from './form.module.css'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport {\r\n    ProfileType,\r\n    setUserProfileData,\r\n} from '../../../../redux/profilePageReducer'\r\nimport { useDispatch } from 'react-redux'\r\n\r\ntype ProfileInfoContactFormType = {\r\n    deactivateEditMode: () => void\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileInfoContactForm = (props: ProfileInfoContactFormType) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        //we have created our initialValues object in a format EmailJS accepts\r\n        initialValues: {\r\n            user_name: props.profile.fullName, //user name\r\n            skills: props.profile.lookingForAJobDescription || '', //skills\r\n            lookingForAJob: false,\r\n            contacts: props.profile.contacts,\r\n        },\r\n        validationSchema: Yup.object({\r\n            user_name: Yup.string().required('* Name field is required'),\r\n        }),\r\n        onSubmit: (values) => {\r\n            console.log('values', values)\r\n            dispatch(\r\n                //@ts-ignore\r\n                setUserProfileData({\r\n                    userId: props.profile.userId,\r\n                    fullName: values.user_name,\r\n                    lookingForAJob: values.lookingForAJob,\r\n                    lookingForAJobDescription: values.skills,\r\n                    contacts: values.contacts,\r\n                    photos: props.profile.photos,\r\n                    AboutMe: 'some information',\r\n                })\r\n            )\r\n            props.deactivateEditMode()\r\n        },\r\n    })\r\n    return (\r\n        <form className={style.accountInfoForm} onSubmit={formik.handleSubmit}>\r\n            <div className={style.fullName}>Full name:</div>\r\n            <label htmlFor=\"user_name\" />\r\n            <input\r\n                id=\"user_name\"\r\n                name=\"user_name\"\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.user_name}\r\n            />\r\n            <div\r\n                className={`expandable ${\r\n                    formik.touched.user_name && formik.errors.user_name\r\n                        ? 'show'\r\n                        : ''\r\n                }`}\r\n            >\r\n                {formik.errors.user_name}\r\n            </div>\r\n            <div className={style.lookingForAJob}>\r\n                <b>Looking for a job:</b>{' '}\r\n                <input\r\n                    id=\"lookingForAJob\"\r\n                    name=\"lookingForAJob\"\r\n                    type={'checkbox'}\r\n                    onChange={formik.handleChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>{' '}\r\n                <textarea\r\n                    id=\"skills\"\r\n                    name=\"skills\"\r\n                    value={formik.values.skills}\r\n                    onChange={formik.handleChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b>{' '}\r\n                {Object.keys(props.profile.contacts).map((key) => (\r\n                    <div key={key}>\r\n                        <b>\r\n                            {key}:{' '}\r\n                            <input\r\n                                type=\"text\"\r\n                                id={'contact.' + key}\r\n                                name={'contacts.' + key}\r\n                                onChange={formik.handleChange}\r\n                            />\r\n                        </b>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <button type=\"submit\">Save</button>\r\n        </form>\r\n    )\r\n}\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport style from './ProfileInfo.module.css'\r\nimport beach from '../../../images/beach.jpg'\r\nimport ava from '../../../images/ava.jpg'\r\nimport { ProfileType } from '../../../redux/profilePageReducer'\r\nimport { PreLoader } from '../../common/PreLoader'\r\nimport { ProfileStatus } from './ProfileStatus'\r\nimport { AiOutlineCamera } from 'react-icons/ai'\r\nimport { ProfileInfoContactForm } from './profileInfoForm/ProfileInfoContactForm'\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    if (!props.profile) {\r\n        return <PreLoader />\r\n    }\r\n\r\n    const setAva = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e != null && e.target.files) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileWrapper}>\r\n            <div className={style.profileInfoBackground}>\r\n                <img src={beach} alt=\"\" />\r\n            </div>\r\n            <div className={style.avaDescriptionWrapper}>\r\n                <img\r\n                    src={\r\n                        props.profile.photos.large\r\n                            ? props.profile.photos.large\r\n                            : ava\r\n                    }\r\n                    alt={'no picture'}\r\n                />\r\n                {props.isOwner && (\r\n                    <div style={{ height: '0' }}>\r\n                        <label\r\n                            htmlFor={'changeAvaInput'}\r\n                            className={style.changeAva}\r\n                        >\r\n                            <AiOutlineCamera />\r\n                        </label>\r\n                        <input\r\n                            id={'changeAvaInput'}\r\n                            type={'file'}\r\n                            onChange={setAva}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                <ProfileStatus\r\n                    status={props.status}\r\n                    updateUserStatus={props.updateUserStatus}\r\n                />\r\n                {editMode ? (\r\n                    <ProfileInfoContactForm\r\n                        deactivateEditMode={() => setEditMode(false)}\r\n                        profile={props.profile}\r\n                    />\r\n                ) : (\r\n                    <ProfileInfoBlock\r\n                        profile={props.profile}\r\n                        owner={props.isOwner}\r\n                        activateEditMode={activateEditMode}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contacts = ({ contactTitle, contactValue }: ContactPropsType) => {\r\n    return (\r\n        <div className={style.contactsInfoWrapper}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileInfoBlockType = {\r\n    profile: ProfileType\r\n    owner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileInfoBlock = (props: ProfileInfoBlockType) => {\r\n    return (\r\n        <div className={style.accountInfo}>\r\n            <div className={style.fullName}>{props.profile.fullName}</div>\r\n            <div className={style.lookingForAJob}>\r\n                <b>Looking for a job:</b>{' '}\r\n                {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {props.profile.lookingForAJob && (\r\n                <div className={style.description}>\r\n                    <b>My professional skills:</b>{' '}\r\n                    {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            )}\r\n            <div>\r\n                <b>Contacts:</b>{' '}\r\n                {Object.keys(props.profile.contacts).map((key) => (\r\n                    <Contacts\r\n                        key={key}\r\n                        contactTitle={key}\r\n                        //@ts-ignore\r\n                        contactValue={props.profile?.contacts[key]}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {props.owner && (\r\n                <button onClick={props.activateEditMode}>Edit info</button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPostWrapper\":\"MyPosts_myPostWrapper__SKDbq\",\"posts\":\"MyPosts_posts__hrhUY\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__fVFb0\",\"likes\":\"Post_likes__XCNpv\",\"profileMessage\":\"Post_profileMessage__gKRhz\"};","import React from 'react'\r\nimport style from './Post.module.css'\r\nimport ava from '../../../../images/ava.jpg'\r\n\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n    return (\r\n        <div>\r\n            <div className={style.post}>\r\n                <div>\r\n                    <img src={ava} alt=\"\" />\r\n                </div>\r\n                <div className={style.profileMessage}>{props.message}</div>\r\n                <div className={style.likes}>Likes: {props.likeCount}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport {\r\n    maxLengthCreator,\r\n    required,\r\n} from '../../../../utils/validators/validators'\r\nimport { Textarea } from '../../../common/FormsControls/FormsControls'\r\n\r\nexport type AddMyPostsFormPropsType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddMyPostsForm: React.FC<InjectedFormProps<AddMyPostsFormPropsType>> = (\r\n    props\r\n) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newPostText'}\r\n                    placeholder={'Enter your message'}\r\n                    cols={40}\r\n                    rows={5}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMyPostsFormReduxForm = reduxForm<AddMyPostsFormPropsType>({\r\n    form: 'addMyPostForm',\r\n})(AddMyPostsForm)\r\n","import React from 'react'\r\nimport style from './MyPosts.module.css'\r\nimport { Post } from './Post/Post'\r\nimport { MyPostsPropsType } from './MyPostsContainer'\r\nimport {\r\n    AddMyPostsFormPropsType,\r\n    AddMyPostsFormReduxForm,\r\n} from './MyPostsForm/AddMyPostsForm'\r\n\r\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map((p) => (\r\n        <Post\r\n            key={p.id}\r\n            id={p.id}\r\n            message={p.message}\r\n            likeCount={p.likeCount}\r\n        />\r\n    ))\r\n\r\n    const addNewPost = (values: AddMyPostsFormPropsType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.myPostWrapper}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddMyPostsFormReduxForm onSubmit={addNewPost} />\r\n            </div>\r\n            <div className={style.posts}>{postsElements}</div>\r\n        </div>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport {\r\n    addPostAC,\r\n    ProfilePagePostsType,\r\n} from '../../../redux/profilePageReducer'\r\nimport { MyPosts } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { StateType } from '../../../redux/redux-store'\r\nimport { Dispatch } from 'redux'\r\n\r\ntype MapStateToPropsType = ProfilePagePostsType\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MyPosts)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileWrapper\":\"Profile_profileWrapper__L+xkM\"};","import React from 'react'\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo'\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer'\r\nimport { ProfileType } from '../../redux/profilePageReducer'\r\nimport styles from './Profile.module.css'\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={styles.profileWrapper}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Profile } from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport { StateType } from '../../redux/redux-store'\r\nimport {\r\n    getUserProfile,\r\n    ProfileType,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    savePhoto,\r\n} from '../../redux/profilePageReducer'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { compose } from 'redux'\r\n\r\nclass ProfileContainer extends React.Component<WithRouterPropsType> {\r\n    refreshProfile() {\r\n        let userId: any = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.id\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    /*componentDidUpdate(\r\n        prevProps: Readonly<WithRouterPropsType>,\r\n        prevState: Readonly<{}>,\r\n        snapshot?: any\r\n    ) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }*/\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    id: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype WithRouterPropsType = RouteComponentProps<PathParamsType> &\r\n    ProfileContainerPropsType\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        id: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n// compose import from redux\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n    }),\r\n    withRouter\r\n)(ProfileContainer)\r\n"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","style","onDoubleClick","type","value","onBlur","updateUserStatus","autoFocus","onChange","e","currentTarget","ProfileInfoContactForm","dispatch","useDispatch","formik","useFormik","initialValues","user_name","profile","fullName","skills","lookingForAJobDescription","lookingForAJob","contacts","validationSchema","Yup","required","onSubmit","values","console","log","setUserProfileData","userId","photos","AboutMe","deactivateEditMode","handleSubmit","htmlFor","id","name","autoComplete","handleChange","touched","errors","Object","keys","map","key","ProfileInfo","PreLoader","src","beach","alt","large","ava","isOwner","height","target","files","savePhoto","ProfileInfoBlock","owner","activateEditMode","Contacts","contactTitle","contactValue","onClick","Post","message","likeCount","maxLength10","maxLengthCreator","AddMyPostsFormReduxForm","reduxForm","form","Field","component","Textarea","placeholder","cols","rows","validate","MyPosts","React","postsElements","posts","p","addPost","newPostText","MyPostsContainer","connect","state","profilePage","addPostAC","Profile","styles","ProfileContainer","this","match","params","history","push","getUserProfile","getUserStatus","refreshProfile","compose","auth","isAuth","withRouter"],"sourceRoot":""}